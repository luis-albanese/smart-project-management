"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"
import { Button } from "@/components/ui/button"
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { useState, useEffect } from "react"
import { Plus, Trash2 } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { toast } from "sonner"

const formSchema = z.object({
  name: z.string().min(2, "El nombre debe tener al menos 2 caracteres"),
  description: z.string().min(10, "La descripción debe tener al menos 10 caracteres"),
  client: z.string().min(2, "El cliente es requerido"),
  techStack: z.string().min(2, "Las tecnologías son requeridas"),
  docsUrl: z.string().url("URL inválida").optional().or(z.literal("")),
  gitlabUrl: z.string().url("URL inválida").optional().or(z.literal("")),
  status: z.enum(['active', 'maintenance', 'completed', 'paused']),
})

interface Project {
  id: string;
  name: string;
  description: string;
  client: string;
  environments: { name: string; url: string }[];
  techStack: string[];
  status: 'active' | 'maintenance' | 'completed' | 'paused';
  docsUrl?: string;
  gitlabUrl?: string;
  comments: { id: string; text: string; author: string; date: string }[];
  assignedUsers: string[];
  createdAt: string;
  updatedAt: string;
}

interface EditProjectDialogProps {
  isOpen: boolean;
  onClose: () => void;
  project: Project | null;
  onSuccess: () => void;
}

export function EditProjectDialog({ isOpen, onClose, project, onSuccess }: EditProjectDialogProps) {
  const [loading, setLoading] = useState(false)
  const [environments, setEnvironments] = useState([
    { name: "Desarrollo", url: "" },
    { name: "QA", url: "" },
    { name: "Producción", url: "" },
  ])

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      description: "",
      client: "",
      techStack: "",
      docsUrl: "",
      gitlabUrl: "",
      status: "active",
    },
  })

  // Cargar datos del proyecto cuando se abre el modal
  useEffect(() => {
    if (project && isOpen) {
      // Validar y preparar datos del proyecto
      const safeProject = {
        name: project.name || "",
        description: project.description || "",
        client: project.client || "",
        techStack: Array.isArray(project.techStack) ? project.techStack.join(", ") : "",
        docsUrl: project.docsUrl || "",
        gitlabUrl: project.gitlabUrl || "",
        status: project.status || "active"
      }

      form.reset(safeProject)
      
      // Validar y preparar entornos
      const safeEnvironments = Array.isArray(project.environments) && project.environments.length > 0 
        ? project.environments.map(env => ({
            name: env?.name || "",
            url: env?.url || ""
          }))
        : [
            { name: "Desarrollo", url: "" },
            { name: "QA", url: "" },
            { name: "Producción", url: "" },
          ]
      
      setEnvironments(safeEnvironments)
    }
  }, [project, isOpen, form])

  async function onSubmit(values: z.infer<typeof formSchema>) {
    if (!project) return
    
    try {
      setLoading(true)
      
      // Validar entornos con verificación de undefined/null
      const validEnvironments = environments.filter((env) => 
        env && env.url && typeof env.url === 'string' && env.url.trim() !== ""
      )

      if (validEnvironments.length === 0) {
        toast.error("Debe agregar al menos un entorno con URL")
        return
      }

      // Convertir techStack de string a array con validación
      const techStackString = values.techStack || ""
      const techStackArray = techStackString
        .split(",")
        .map((tech) => tech ? tech.trim() : "")
        .filter((tech) => tech !== "")

      // Validar que tengamos al menos una tecnología
      if (techStackArray.length === 0) {
        toast.error("Debe especificar al menos una tecnología")
        return
      }

      // Preparar datos con validaciones
      const updateData = {
        name: values.name?.trim() || "",
        description: values.description?.trim() || "",
        client: values.client?.trim() || "",
        techStack: techStackArray,
        environments: validEnvironments,
        status: values.status,
        docsUrl: values.docsUrl?.trim() || undefined,
        gitlabUrl: values.gitlabUrl?.trim() || undefined,
      }

      // Actualizar proyecto usando la API
      const response = await fetch(`/api/projects/${project.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData),
      })

      const data = await response.json()

      if (response.ok) {
        toast.success('Proyecto actualizado exitosamente')
        
        // Esperar un momento para que el usuario vea la notificación
        setTimeout(() => {
          onSuccess()
          onClose()
        }, 1000)
      } else {
        toast.error(data.error || 'Error al actualizar proyecto')
      }
    } catch (error) {
      console.error("Error al actualizar el proyecto:", error)
      toast.error('Error de conexión al actualizar proyecto')
    } finally {
      setLoading(false)
    }
  }

  const addEnvironment = () => {
    setEnvironments([...environments, { name: "", url: "" }])
  }

  const removeEnvironment = (index: number) => {
    const newEnvironments = [...environments]
    newEnvironments.splice(index, 1)
    setEnvironments(newEnvironments)
  }

  const updateEnvironment = (index: number, field: string, value: string) => {
    const newEnvironments = [...environments]
    if (newEnvironments[index]) {
      newEnvironments[index] = { 
        ...newEnvironments[index], 
        [field]: value || "" 
      }
      setEnvironments(newEnvironments)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[900px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Editar Proyecto</DialogTitle>
          <DialogDescription>
            Modifica la información del proyecto "{project?.name}"
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Información del Proyecto</CardTitle>
                  <CardDescription>Modifica los datos básicos del proyecto</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Nombre del Proyecto</FormLabel>
                        <FormControl>
                          <Input placeholder="Portal de Clientes" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Descripción</FormLabel>
                        <FormControl>
                          <Textarea placeholder="Breve descripción del proyecto" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="client"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Cliente</FormLabel>
                        <FormControl>
                          <Input placeholder="Nombre del cliente" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="techStack"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Tecnologías</FormLabel>
                        <FormControl>
                          <Input placeholder="React, Node.js, MongoDB" {...field} />
                        </FormControl>
                        <FormDescription>Separadas por comas</FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="docsUrl"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>URL Documentación</FormLabel>
                        <FormControl>
                          <Input placeholder="https://docs.proyecto.com" {...field} />
                        </FormControl>
                        <FormDescription>Enlace a la carpeta de documentación</FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="gitlabUrl"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Repositorio GitLab</FormLabel>
                        <FormControl>
                          <Input placeholder="https://gitlab.com/proyecto" {...field} />
                        </FormControl>
                        <FormDescription>Enlace al repositorio en GitLab</FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Estado</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Selecciona un estado" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="active">Activo</SelectItem>
                            <SelectItem value="maintenance">Mantenimiento</SelectItem>
                            <SelectItem value="completed">Completado</SelectItem>
                            <SelectItem value="paused">Pausado</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Entornos</CardTitle>
                  <CardDescription>Configura las URLs de los diferentes entornos</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {environments.map((env, index) => (
                      <div key={index} className="grid gap-2">
                        <div className="flex items-center justify-between">
                          <h4 className="text-sm font-medium">Entorno {index + 1}</h4>
                          {environments.length > 1 && (
                            <Button type="button" variant="ghost" size="sm" onClick={() => removeEnvironment(index)}>
                              <Trash2 className="h-4 w-4 text-red-500" />
                            </Button>
                          )}
                        </div>
                        <div className="grid grid-cols-2 gap-2">
                          <div>
                            <label className="text-sm font-medium">Nombre</label>
                            <Input
                              value={env.name}
                              onChange={(e) => updateEnvironment(index, "name", e.target.value)}
                              placeholder="Desarrollo, QA, Producción"
                            />
                          </div>
                          <div>
                            <label className="text-sm font-medium">URL</label>
                            <Input
                              value={env.url}
                              onChange={(e) => updateEnvironment(index, "url", e.target.value)}
                              placeholder="https://ejemplo.com"
                            />
                          </div>
                        </div>
                      </div>
                    ))}

                    <Button type="button" variant="outline" size="sm" className="w-full" onClick={addEnvironment}>
                      <Plus className="mr-2 h-4 w-4" />
                      Agregar Entorno
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>

            <DialogFooter>
              <Button type="button" variant="outline" onClick={onClose}>
                Cancelar
              </Button>
              <Button type="submit" disabled={loading}>
                {loading ? "Actualizando..." : "Actualizar Proyecto"}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
} 