# Dockerfile optimizado para Windows
FROM node:18-alpine AS base

# Instalar dependencias solo cuando sea necesario
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copiar archivos de package manager
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Construir la aplicaciÃ³n
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Construir sin standalone para evitar symlinks
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Modificar temporalmente next.config.mjs para build sin standalone
RUN mv next.config.mjs next.config.mjs.bak
RUN echo "const nextConfig = { eslint: { ignoreDuringBuilds: true }, typescript: { ignoreBuildErrors: true }, images: { unoptimized: true } }; export default nextConfig" > next.config.mjs
RUN npm run build
RUN mv next.config.mjs.bak next.config.mjs

# Imagen final sin standalone
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copiar archivos construidos
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/database.json ./database.json

USER nextjs

EXPOSE 3000
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

CMD ["npm", "start"] 